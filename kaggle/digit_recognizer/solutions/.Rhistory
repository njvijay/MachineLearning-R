rslt4 <- lapply(x3,runif, min=0, max=10)
rslt4
x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2))
x
lapply(x, function(argmt) { argmt[,1]})
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))
lrslt <- lapply(x,mean)
print ("Result from lapply")
print(lrslt)
print ("Using sapply")
srslt <- sapply(x,mean)
print ("Result from sapply")
print(srslt)
print(srslt$a)
library(datasets)
data(iris)
View(iris)
mean(Sepal.Length)
mean(iris$Sepal.Length)
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
x <- iris[iris$Species == 'virginica',1:4]
x
x <- iris[iris$Species == 'virginica',1:5]
x
apply(x[,1:4],2,mean)
tapply(iris[,1:4], iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
debug(ls)
n
library(datasets)
?mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
View(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
apply(mtcars, 2, mean)
lapply(mtcars, mean)
apply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
m <- tapply(mtcars$mpg, mtcars$cyl, mean)
q
exit
quit()
q
Quit
tapply(iris$Sepal.Length, iris$Species, mean)
tapply(mtcars$mpg, mtcars$cyl, avg)
tapply(mtcars$mpg, mtcars$cyl, mean)
debug()
abs(26.66364 - 15.10000)
tapply(mtcars$hp, mtcars$cyl, mean)
abs(82.63636 - 209.21429)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
?rnorm
str(rnorm)
?qpois
help(dpois)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
set.seed(1)
rpois(5, 2)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(x) {
x <<- y
m <<- NULL
}
get <- function(x) x
setinv <- function(minv) m <<- minv
getinv <- function() m
list (set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getinv()
if (!is.null(m)) {
message("getting cached data")
return m
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
## Return a matrix that is the inverse of 'x'
}
cacheSolve <- function(x, ...) {
m <- x$getinv()
if (!is.null(m)) {
message("getting cached data")
return m
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
## Return a matrix that is the inverse of 'x'
}
cacheSolve <- function(x, ...) {
m <- x$getinv()
if (!is.null(m)) {
print("getting cached data")
return m
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
## Return a matrix that is the inverse of 'x'
}
cacheSolve <- function(x, ...) {
m <- x$getinv()
if (!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
## Return a matrix that is the inverse of 'x'
}
makeCacheMatrix(matrix(1:4,2,2))
a <- makeCacheMatrix(x=matrix(1:4,2,2))
d <- cachesolve(a)
d <- cacheSolve(a)
d <- cacheSolve(x=a)
class(a)
a$get()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function(x) x
setinv <- function(minv) m <<- minv
getinv <- function() m
list (set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getinv()
if (!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
## Return a matrix that is the inverse of 'x'
}
a <- makeCacheMatrix(x=matrix(1:4,2,2))
d <- cacheSolve(x=a)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(minv) m <<- minv
getinv <- function() m
list (set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getinv()
if (!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
## Return a matrix that is the inverse of 'x'
}
a <- makeCacheMatrix(x=matrix(1:4,2,2))
d <- cacheSolve(x=a)
d$getinv()
d <- cacheSolve(x=a)
d
d <- cacheSolve(x=a)
d
library(MASS)
?Smarket
library(ISLR)
?Smarket
head(Smarket)
attach(Smarket)
train <- Year < 2005
test <- !train
training_data <- Smarket[train,]
testing_data <- Smarket[test,]
train.Direction <- Direction[train]
train <- Year < 2005
test <- !train
#kNN requires standardized columns because data comes with different types and measurement
stan_data <- scale(Smarket[,c(2,3)]) --Here 2,3 in the vector represent Lag1 and Lag2 features
stan_data <- scale(Smarket[,c(2,3)]) ##Here 2,3 in the vector represent Lag1 and Lag2 features
?var
var(Smarket[,2])
var(Smarket[,2])
var(stan_data[1])
var(stan_data[2])
var(stan_data[,1])
var(stan_data[,2])
train.X <- stan_data[,train]
train.X <- stan_data[train,]
test.X <- stan_data[test,]
train.Direction <- Direction[train]
library(class)
knn.pred <- knn(train=train.X,test = test.X,cl = train.Direction,k = 1)
knn.pred
table(train.Direction,knn.pred)
test.Direction <- Direction[test]
table(test.Direction,knn.pred)
table(knn.pred, test.Direction)
library(gmodels)
CrossTable(x=test.Direction,y=knn.pred,prop.chisq = FALSE)
mean(knn.pred != test.Direction)
knn.pred <- knn(train=train.X,test = test.X,cl = train.Direction,k = 3)
```
library(gmodels)
CrossTable(x=test.Direction,y=knn.pred,prop.chisq = FALSE)
#Finding miss classification error rate
mean(knn.pred != test.Direction)
mean(knn.pred == test.Direction)
knn.pred <- knn(train=train.X,test = test.X,cl = train.Direction,k = 10)
CrossTable(x=test.Direction,y=knn.pred,prop.chisq = FALSE)
#Finding how many % of them are correctly predicted
mean(knn.pred == test.Direction)
mean(knn.pred == test.Direction)
knn.pred <- knn(train=train.X,test = test.X,cl = train.Direction,k = 10)
#Finding how many % of them are correctly predicted
mean(knn.pred == test.Direction)
set.seed(2)
knn.pred <- knn(train=train.X,test = test.X,cl = train.Direction,k = 10)
CrossTable(x=test.Direction,y=knn.pred,prop.chisq = FALSE)
#Finding how many % of them are correctly predicted
mean(knn.pred == test.Direction)
var(stan_data)
View(Smarket)
stand_data2 = scale(Smarket[,2:7])
var(stand_data2)
train.X2 = stand_data2[train,]
test.X2 = stand_data2[test,]
train.Direction2 = Direction[train]
test.Direction2 = Direction[test]
knn.pred <- knn(train = train.X2,test = test.X2,cl = train.Direction2,k = 3)
CrossTable(x = knn.pred, y = test.Direction2, prop.chisq = FALSE)
mean(knn.prd == test.Direction2)
mean(knn.pred == test.Direction2)
knn.pred <- knn(train = train.X2,test = test.X2,cl = train.Direction2,k = 10)
#Evaluating the performance of the model
CrossTable(x = knn.pred, y = test.Direction2, prop.chisq = FALSE)
##Finding how many % of them are correctly predicted
mean(knn.pred == test.Direction2)
summary(stand_data2)
library(Rweka)
library(RWeka)
classifier <- IBk(Direction~.,data=Smarket)
class(classifier)
classifier
summary(classifier)
evaluate_Weka_classifier(classifier, numFolds = 10)
classifier <- IBk(Direction~Lag1+Lag2,data=Smarket)
summary(classifier)
evaluate_Weka_classifier(classifier, numFolds = 10)
?sample
normalize <- function(x) {
norm <- ((x - mean(x))/(max(x) - min(x)))
return norm
}
normalize <- function(x) {
norm <- ((x - min(x))/(max(x) - min(x)))
return norm
}
normalize <- function(x) {
norm <- ((x - min(x))/(max(x) - min(x)))
return (norm)
}
normalize(c(200,10,20,10000))
summary(normalize(c(200,10,20,10000)))
library(ISLR)
head(Smarket)
input.norml <- as.data.frame(lapply(Smarket[,-9]),normalize)
input.norml <- as.data.frame(lapply(Smarket[,-9],normalize)
)
input.norml <- as.data.frame(lapply(Smarket[,-9],normalize))
head(input.norml)
View(input.norml)
input.norml <- as.data.frame(input.norml, Direction=Smarket$Direction)
head(input.norml)
input.normal$Direction
input.norml$Direction
head(Smarket)
input.norml <- as.data.frame(lapply(Smarket[,-9],normalize), Direction=Smarket$Direction)
head(input.nroml)
head(input.norml)
input.norml <- as.data.frame(lapply(Smarket[,-9],normalize))
input.norml$Direction <- Smarket$Direction
head(input.norml)
input.norml[sample(x = input.norml,size = nrow(input.norml) * test_pct/100,replace = False)]
input.norml[sample(x = input.norml,size = nrow(input.norml) * test_pct/100,replace = FALSE)]
input.norml[sample(x = input.norml,size = nrow(input.norml) * 20/100,replace = FALSE)]
input.norml[sample(x = input.norml,size = nrow(input.norml) * 20/100,replace = FALSE),]
input.norml[sampe(nrow(input.norml),size = nrow(input.norml) * 20/100,replace = FALSE),]
input.norml[sample(nrow(input.norml),size = nrow(input.norml) * 20/100,replace = FALSE),]
sample(nrow(input.norml),size = nrow(input.norml) * 20/100,replace = FALSE)
sample(input.norml,size = nrow(input.norml) * 20/100,replace = FALSE)
sample(input.norml,size = nrow(input.norml) * 20/100,replace = FALSE)
nrow(input.norml)
sample(1250,3)
marketSample <- function(smarkt, test_pct = 20) {
train_pct = 100 - test_pct
#Seeding for reproducibility
set.seed(test_pct)
test_indx <- sample(nrow(smarkt), nrow(smarkt) * test_pct/100, replace=FALSE)
test.all <- smarkt[test_indx,]
test.data <- test.all[,-9]
test.direction <- test.all$Direction
#Prep. training data  which is noting but remaing test data
train.all <- smarkt[!test_indx,]
train.data <- train.all[,-9]
train.direction <- train.all$Direction
rtrn_list <- list(testdata = test.data, testdir = test.direction, traindata = train.data, traindir = train.direction)
return(rtrn_list)
}
temp <- marketSample(Smarket, 10)
class(temp)
temp1 <- temp$testdata
head(temp1)
head(temp$traindata)
head(temp1
)
head(temp$testdir)
head(temp$traindir)
indx <- sample(nrow(Smarket),nrow(Smarket)*20/100, replace=FALSE)
indx
!indx
!indx %in% 1:nrow(Smarket)
!indx %in% c(1:nrow(Smarket))
!indx %in% c(1:nrow(Smarket))
Smarket[!is.element(indx, c(1:nrow(Smarket)))]
Smarket[!is.element(indx, c(1:nrow(Smarket))),]
is.element(indx, c(1:nrow(Smarket)))
head(smarkt[-indx,])
head(Smarket[-indx,])
-indx
View(Smarket[-indx,])
marketSample <- function(smarkt, test_pct = 20) {
train_pct = 100 - test_pct
#Seeding for reproducibility
set.seed(test_pct)
test_indx <- sample(nrow(smarkt), nrow(smarkt) * test_pct/100, replace=FALSE)
test.all <- smarkt[test_indx,]
test.data <- test.all[,-9]
test.direction <- test.all$Direction
#Prep. training data  which is noting but remaing test data
train.all <- smarkt[-test_indx,]
train.data <- train.all[,-9]
train.direction <- train.all$Direction
rtrn_list <- list(testdata = test.data, testdir = test.direction, traindata = train.data, traindir = train.direction)
return(rtrn_list)
}
head(temp$traindata)
temp <- marketSample(Smarket,20)
head(temp$traindata)
head(temp$testdata)
temp$testdata
del(temp)
rm(temp)
library(ISLR)
input.norml <- as.data.frame(lapply(Smarket[,-9],normalize))
input.norml$Direction <- Smarket$Direction
temp_list <- marketSample(input.norml, 10)
train.data <- temp_list$traindata
train.dir <- temp_list$traindir
test.data <- temp_list$testdata
test.dir <- temp_list$testdir
rm(temp_list)
knn.pred <- knn(train = train.data,test = test.data,cl = train.data,k = 3)
knn.pred <- knn(train = train.data,test = test.data,cl = train.dir,k = 3)
table(knn.pred,test.dir)
mean(knn.pred == test.dir)
library(ISLR)
input.norml <- as.data.frame(lapply(Smarket[,-9],normalize))
input.norml$Direction <- Smarket$Direction
temp_list <- marketSample(input.norml, 20)
train.data <- temp_list$traindata
train.dir <- temp_list$traindir
test.data <- temp_list$testdata
test.dir <- temp_list$testdir
rm(temp_list)
```
knn.pred <- knn(train = train.data,test = test.data,cl = train.dir,k = 3)
table(knn.pred,test.dir)
mean(knn.pred == test.dir)
library(e1071)
library(class)
train <- read.csv('https://app.box.com/s/gkadabsw7s7qhkqhgvlx', header=TRUE)
train <- read.csv("https://app.box.com/s/gkadabsw7s7qhkqhgvlx", header=TRUE)
train <- read.table("https://app.box.com/s/gkadabsw7s7qhkqhgvlx", header=TRUE)
install.packages("Rcurl")
install.packages("RCurl", dependencies=TRUE)
train_url <- getURL("https://app.box.com/s/gkadabsw7s7qhkqhgvlx")
require(RCurl)
?require
train_url <- getURL("https://app.box.com/s/gkadabsw7s7qhkqhgvlx")
train <- read.csv(textConnection(train_url), header=TRUE)
head(train)
library(RCurl)
setwd("/Users/njvijay/big_data/Github/MachineLearning-R/kaggle/digit_recognizer/solutions/")
mycsv.connection <- getURL(url = "http://kaggle.sowmiyan.com/digit_recog/train.csv")
train <- read.csv(textConnection(object = mycsv.connection),header=TRUE)
mycsv.connection <- getURL(url = "http://kaggle.sowmiyan.com/digit_recog/test.csv")
test <- read.csv(textConnection(object = mycsv.connection),header=TRUE)
#Checking number of records for each digits available in the training set
aggregate(pixel0~label, data=train, FUN = length)
#All digits are distributed equally almost
prop.table(table(train$label, train$pixel0))*100
df.sample <- data.frame()
for (i in 0:9) {
sprintf("Sampling Digit %d",i)
#Seeding required for reproducibility
set.seed(i)
temp.df <- train[train$label==i,]
#Get 20% of the existing data for model evaluation
temp.samp <- sample(nrow(temp.df),nrow(temp.df)*5/100,replace = FALSE)
df.sample <- rbind(df.sample,as.data.frame(temp.df[temp.samp,]))
}
#Checking distribution of the sample on digit labels
aggregate(pixel10~label,data=df.sample, FUN=length)
write.csv(df.sample,file="sample/digit_train_sample_5per.csv",row.names=FALSE,quote=FALSE)
library(e1071)
library(class)
setwd("/Users/njvijay/big_data/Github/MachineLearning-R/kaggle/digit_recognizer/solutions/")
train <- read.csv('sample/digit_train_sample_5per.csv', header=TRUE)
train_knn.pixel <- train[,-1]
train_knn.digit <- train[,1]
train_knn.digitfactor <- factor(x = train_knn.digit,levels = 0:9)
#Full Data set can be used for cross validation
knn.cross <- tune.knn(x = train_knn.pixel, y = train_knn.digitfactor, k = 1:20,tunecontrol=tune.control(sampling = "cross"), cross=10)
#Summarize the resampling results set
summary(knn.cross)
#Plot the error rate
plot(knn.cross)
knn.boot <- tune.knn(x = train_knn.pixel, y = train_knn.digitfactor, k = 1:10, tunecontrol=tune.control(sampling = "boot"))
summary(knn.cross)
#Plot the error rate
plot(knn.cross)
summary(knn.boot)
#Plot the error rate
plot(knn.boot)
?tune
rf.cross <- tune.randomForest(x = train_knn.pixel, y = train_knn.digitfactor,tuneControl = tune.control(sampling = "cross"), cross=10)
summary(rf.cross)
plot(rf.cross)
rf.cross
rf.boot tune.randomForest(x = train_knn.pixel, y = train_knn.digitfactor
,tuneControl = tune.control(sampling = "boot"))
rf.boot <- tune.randomForest(x = train_knn.pixel, y = train_knn.digitfactor
,tuneControl = tune.control(sampling = "boot"))
summary(rf.boot)
?randomForest
?example(randomForest)
example(randomForest)
set.seed(100)
test_indx <- sample(nrow(train), nrow(train)*70/100, replace=FALSE)
test.all <- train[test_indx,]
test.data <- test.all[,-1]
test.direction <- test.all[,1]
#Prep. training data  which is noting but remaing test data
train.all <- train[-test_indx,]
train.data <- train.all[,-1]
train.direction <- train.all[,1]
set.seed(100)
test_indx <- sample(nrow(train), nrow(train)*30/100, replace=FALSE)
test.all <- train[test_indx,]
test.data <- test.all[,-1]
test.direction <- test.all[,1]
#Prep. training data  which is noting but remaing test data
train.all <- train[-test_indx,]
train.data <- train.all[,-1]
train.direction <- train.all[,1]
rf_model <- randomForest(x = train.data,y = train.direction)
class(rf_model)
summary(rf_model)
rf_model <- randomForest(x = train.data,y = train.direction, ntree=500)
summary(rf_model)
library(RWeka)
write.arff(train.all, file="sample/digit_train_sample_5per.arff")
weka_train <- train[,-1]
weka_train <- train[,-1]
weka_train$level <- factor(train[,1], levels=0:9)
write.arff(weka_train,"sample/digit_train_sample_5per.arff")
vignette(package = "caret")
library(doMC)
install.packages("doMC",dependencies = T)
knn.cross <- tune.knn(x = train_knn.pixel, y = train_knn.digitfactor, k = 1:5
,tunecontrol=tune.control(sampling = "cross"), cross=10)
